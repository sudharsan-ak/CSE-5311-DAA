#include "stdafx.h"
#include <iostream>
#include <map>
#include <vector>
#include <ctime>

using namespace std;
#define MAX  (25000)

int repSize = 0;
int LSISLength;

/*The following method takes the user inputs and creates the map of all the unique values in the second sequence. The map is then used to
  create an array that replaces each value of the first sequence with the positions provided in the map.
  Parameters:
  int n1 - size of sequence 1
  int[] a1 - sequence 1
  int[] a2 - sequence 2
  int n2 - size of sequence 2
  Returns:
  int[] repArr - array consisting of sequence 1 values replaced by sequence 2 positions

  Reference:- 
  1. http://www.bogotobogo.com/Algorithms/countingsort.php
  2. http://www.cplusplus.com/reference/map/multimap/
*/
int* getReplaceArray(int n1, int a1[], int a2[], int n2) {
	int i, j, k;
	int idx = 0;
	int min, max;
	int n = n2;
	int *arr = new int[n2];
	multimap<int, int> mymm;
	multimap<int, int>::iterator it;

	//Implementing counting sort to sort the algorithm
	for (i = 0; i < n2; i++) {
		arr[i] = a2[i];
	}

	//Get the range of the values in the sequence
	min = max = arr[0];
	for (i = 1; i < n2; i++) {
		min = (arr[i] < min) ? arr[i] : min;
		max = (arr[i] > max) ? arr[i] : max;
	}

	k = max - min + 1;

	//Create a count of all the values in the sequence
	int *B = new int[k];
	for (i = 0; i < k; i++) B[i] = 0;

	for (i = 0; i < n2; i++) B[arr[i] - min]++;
	for (i = min; i <= max; i++)
		for (j = 0; j < B[i - min]; j++) arr[idx++] = i;

	//Remove Duplicates From Sorted Array
	for (i = 0; i<n; ++i)
		for (j = i + 1; j<n;) {
			if (arr[i] == arr[j]) {
				for (k = j; k<n - 1; ++k)
					arr[k] = arr[k + 1];
				--n;
			}
			else
				++j;
		}

	//Create map with sequence values and their relative positions
	for (i = 0; i < n; i++) {
		for (j = n2 - 1; j >= 0; j--) {
			if (arr[i] == a2[j]) {
				mymm.insert(std::pair<int, int>(arr[i], j));
			}
		}
	}
	delete[] arr;

	//Replace values with first sequence
	std::vector<int> repVector;

	for (i = 0; i < n1; i++) {
		std::pair <std::multimap<int, int>::iterator, std::multimap<int, int>::iterator> ret;
		ret = mymm.equal_range(a1[i]);
		for (std::multimap<int, int>::iterator it = ret.first; it != ret.second; ++it) {
			repVector.push_back(it->second);
		}
	}

	//Store the values the vector into an array
	int *repArr = new int[repVector.size()];

	for (int i = 0; i < repVector.size(); i++) {
		repArr[i] = repVector[i];
	}

	repVector.clear();

	//get size of replaced array
	repSize = sizeof(repArr);

	return repArr;
}

/*The following method takes the user inputs and uses LSIS algorithm to get LCS of the inputs. It gives a call to 'getReplaceArray'
to get an array of positions of sequence 2.
Parameters:
int n1 - size of sequence 1
int[] a1 - sequence 1
int[] a2 - sequence 2
int n2 - size of sequence 2
Returns:
int[] commomSeq - array consisting of sequence 1 values replaced by sequence 2 positions

Reference:- http://ranger.uta.edu/~weems/NOTES5311/LISgriesStrict.c
*/
int* getLSIS(int n1, int n2, int a1[], int a2[]) {

	int *repArr = getReplaceArray(n1, a1, a2, n2);

	int m[25000];      
	int seq[25000];    // Result sequence
	int sub[25000];    
	int mLink[25000];  // The value j for the b[j] last used to set m[i]
	int i, j, k, mid, low, high;

	k = 1;
	m[1] = repArr[0];
	sub[0] = (-1);
	mLink[1] = 0;
	for (i = 1; i < repSize; i++)
		if (repArr[i] == m[k]) {
			continue;
		}
		else if (repArr[i]>m[k]) {
			k++;
			m[k] = repArr[i];
			sub[i] = mLink[k - 1];
			mLink[k] = i;
		}
		else if (repArr[i]<m[1]) {
			m[1] = repArr[i];
			sub[i] = (-1);
			mLink[1] = i;
		}
		else {
			low = 1;
			high = k;
			while (low != high - 1) {
				mid = (low + high) / 2;
				if (m[mid] <= repArr[i])
					low = mid;
				else
					high = mid;
			}
			// Check search result
			if (m[low]>repArr[i] || m[high] <= repArr[i])
				cout << "error\n";
			if (m[high - 1] == repArr[i]) {
				continue;
			}
			m[high] = repArr[i];
			sub[i] = mLink[high - 1];
			mLink[high] = i;
		}
		
		
		// Get result sequence
		i = mLink[k];
		
		int size = 0;
		for (j = k - 1; j >= 0; j--) {
			seq[j] = repArr[i];
			i = sub[i];
		}

		LSISLength = k;
		int *commonSeq = new int[k];
		for (i = 0; i < k; i++) {
			commonSeq[i] = a2[seq[i]];
		}

		return commonSeq;
}


/*The following method takes the user inputs and uses the matrix method to calulate the LCS of the two sequences
Parameters:
int n1 - size of sequence 1
int[] a1 - sequence 1
int[] a2 - sequence 2
int n2 - size of sequence 2
Returns:
int[] commomSeq - array consisting of sequence 1 values replaced by sequence 2 positions

Reference:- https://www.geeksforgeeks.org/printing-longest-common-subsequence/
*/
int* LCSSpace(int *a1, int *a2, int n1, int n2, int *LCSlength) {

	vector<vector<short> > vectorMatrix;

	//Build a matrix of both the sequences
	for (int i = 0; i <= n1; i++)
	{
		vector<short> temp;
		vectorMatrix.push_back(temp);
		for (int j = 0; j <= n2; j++)
		{
			if (i == 0 || j == 0) {
				vectorMatrix[i].push_back(0);
			}
			else if (a1[i - 1] == a2[j - 1]) {
				vectorMatrix[i].push_back(vectorMatrix[i - 1][j - 1] + 1);
			}
			else {
				if (vectorMatrix[i - 1][j] < vectorMatrix[i][j - 1]) {
					vectorMatrix[i].push_back(vectorMatrix[i][j - 1]);
				}
				else {
					vectorMatrix[i].push_back(vectorMatrix[i-1][j]);
				}
			}		
		}
	}

	int index = vectorMatrix[n1][n2];
	*LCSlength = vectorMatrix[n1][n2];

	//An array to store the LCS sequence
	int *LCS = new int[index + 1];
	
	int i = n1, j = n2;
	while (i > 0 && j > 0) {
		
		//Check if the current value is part of both the sequences or not.
		if (a1[i - 1] == a2[j - 1]) {
			LCS[index - 1] = a1[i - 1]; // Store the result in the result sequence
			i--; j--; index--;
		}

		//If not find the larger of the two neighboring values and go in that direction
		else if (vectorMatrix[i - 1][j] > vectorMatrix[i][j - 1])
			i--;
		else
			j--;
	}

	return LCS;
}

int main()
{
	int n1, n2, LCSLength;
	
	cin >> n1;
	cin >> n2;

	//Accept sequence size
	int *a1 = new int[n1];
	int *a2 = new int[n2];

	//Accept sequence values
	for (int i = 0; i < n1; i++) {
		cin >> a1[i];
	}
	
	cout << "-1\n";

	//Accept sequence values
	for (int i = 0; i < n2; i++) {
		cin >> a2[i];
	}

	cout << "-1\n";
	int start_s = clock();
	int *commonByLSIS = getLSIS(n1, n2, a1, a2);
	int stop_s = clock();
	
	double LSISTime = (stop_s - start_s)/ double(CLOCKS_PER_SEC);

	start_s = clock();
	int *LCS = LCSSpace(a1, a2, n1, n2, &LCSLength);
	stop_s = clock();

	double LCSTime = (stop_s - start_s) / double(CLOCKS_PER_SEC);

	cout << "\n";
	//Check is both LCS sequences are equal
	int flag = 0;
	if (LCSLength == LSISLength) {
		for (int i = 0; i < LCSLength; i++) {
			if (LCS[i] != commonByLSIS[i]) {
				flag = 1;
				break;
			}
		}
		
	}

	//Print the size and LCS sequence
	if (flag != 1) {
		cout << "\n" << LCSLength;
		for (int i = 0; i < LCSLength; i++) {
			cout << "\n" << LCS[i];
		}
		cout << "\n-1";
	}

	//Print CPU times for both methods
	cout << "\n" << LSISTime<<"\n";
	cout << LCSTime << "\n";


   cin.clear();
   cin.ignore();
   cin.get();
}